# encoding: utf-8
class Order < ActiveRecord::Base
  # attr_accessible :title, :body

  include SetCreatedUser
  include CustomAssociationMethod

  #假删除
  acts_as_paranoid

  #belongs_to :created_user,:foreign_key => "created_user_id",:class_name => "User"
  belongs_to :mini_client,:counter_cache => true
  belongs_to :client,:counter_cache => true
  belongs_to :contact_person,:foreign_key => "contact_person_id",:class_name=>"ContactPerson"

  has_many :order_items,:dependent => :destroy
  accepts_nested_attributes_for :order_items

  has_many :paid_items,:dependent => :destroy

  has_many :check_items,:as=>:check_resource,:dependent => :destroy
  has_one :active_check_item,:as=>:check_resource,:class_name => "CheckItem",:conditions => ["is_checked=?",false],:order=>"created_at DESC"


  #validates_presence_of :product_id

  #审核状态
  CHECK_STATUS = {0=>"正常状态",1=>'新建订单审核中',2=>"新建订单被驳回",3=>"修改订单审核中",4=>"修改订单驳回",5=>"付欠款审核中",6=>"续费审核中"}

  #attr_reader :owe_amount
  #def owe_amount
  #  self.total_amount - self.received_amount rescue "异常"
  #end

  def check_status_text
    CHECK_STATUS[self.check_status] rescue "-"
  end

  def serve_status
    self.order_items.any?{|item|item.serve_end_at > Date.today}
  end

  def serve_status_text
    self.serve_status ? "正常服务中..." : "所有订单的服务已到期！"
  end

  def order_items_attributes
    attrs = {}
    self.order_items.each_with_index do |item,i|
      attrs[i.to_s]=item.attributes
    end
    attrs
  end


  #def total_amount
  #  self.order_items.sum{|item|item.total_price}
  #end


  #def received_amount
  #  self.paid_items.sum{|item|item.paid_amount}
  #end

  #def total_paid_amount
  #
  #end
  #
  #def total_owe_amount
  #
  #end



  before_create :set_data1
  after_destroy :set_client_status
  private

  def set_data1
    count_num = Order.with_deleted.count + 1
    num = 6-count_num.to_s.length
    self.number = "0"*num + count_num.to_s
    #self.created_user = User.current
  end

  def set_client_status
    self.mini_client.update_attribute(:status_num,3) if self.mini_client.orders.count == 0
  end


end